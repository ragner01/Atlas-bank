name: AtlasBank Trust Portal CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/Trust/Atlas.Trust.Portal/**'
      - 'infrastructure/docker/docker-compose.additions.phase18.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/Trust/Atlas.Trust.Portal/**'

env:
  DOTNET_VERSION: '9.0.x'
  DOCKER_REGISTRY: 'atlasbank.azurecr.io'
  IMAGE_NAME: 'trust-portal'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore src/Trust/Atlas.Trust.Portal/Atlas.Trust.Portal.csproj
      
    - name: Build application
      run: dotnet build src/Trust/Atlas.Trust.Portal/Atlas.Trust.Portal.csproj --no-restore --configuration Release
      
    - name: Run tests
      run: dotnet test src/Trust/Atlas.Trust.Portal/Atlas.Trust.Portal.csproj --no-build --configuration Release --verbosity normal
      
    - name: Security scan with CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: csharp
        queries: security-and-quality
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'AtlasBank Trust Portal'
        path: '.'
        format: 'ALL'
        out: './reports'
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: ./reports/

  build-docker:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.DOCKER_REGISTRY }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: src/Trust/Atlas.Trust.Portal
        file: src/Trust/Atlas.Trust.Portal/Dockerfile.secure
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        
    - name: Scan Docker image with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-image-results.sarif'
        
    - name: Upload Docker scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-image-results.sarif'

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Deploy to Azure Container Apps (Staging)
      run: |
        az containerapp update \
          --name trust-portal-staging \
          --resource-group ${{ secrets.AZURE_RG }} \
          --image ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          
    - name: Run smoke tests
      run: |
        # Wait for deployment to be ready
        sleep 30
        
        # Run smoke tests
        curl -f http://trust-portal-staging.atlasbank.com/health || exit 1
        curl -f http://trust-portal-staging.atlasbank.com/swagger || exit 1
        
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Deploy to Azure Container Apps (Production)
      run: |
        az containerapp update \
          --name trust-portal-prod \
          --resource-group ${{ secrets.AZURE_RG }} \
          --image ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          
    - name: Run production smoke tests
      run: |
        # Wait for deployment to be ready
        sleep 60
        
        # Run comprehensive smoke tests
        curl -f https://trust.atlasbank.com/health || exit 1
        curl -f https://trust.atlasbank.com/swagger || exit 1
        curl -f https://trust.atlasbank.com/api/v1/badge/test.svg || exit 1
        
    - name: Update monitoring dashboards
      run: |
        # Update Grafana dashboards with new deployment
        curl -X POST \
          -H "Authorization: Bearer ${{ secrets.GRAFANA_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{"deployment": "${{ github.sha }}", "service": "trust-portal"}' \
          https://grafana.atlasbank.com/api/deployments
          
    - name: Notify production deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#production'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  performance-test:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup k6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
        
    - name: Run performance tests
      run: |
        k6 run --out json=performance-results.json infrastructure/devops/k6/trust-portal-load-test.js
        
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-test-results
        path: performance-results.json

  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-production, performance-test]
    if: always()
    
    steps:
    - name: Clean up old images
      run: |
        # Clean up old container images (keep last 10)
        az acr repository show-tags \
          --name atlasbank \
          --repository trust-portal \
          --orderby time_desc \
          --query '[10:].name' \
          --output tsv | \
        xargs -I {} az acr repository delete \
          --name atlasbank \
          --image trust-portal:{} \
          --yes

