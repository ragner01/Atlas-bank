name: AtlasBank CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  DOTNET_VERSION: '9.0.x'
  DOCKER_REGISTRY: 'ghcr.io'
  IMAGE_NAME: 'atlasbank'

jobs:
  # =============================================
  # CODE QUALITY AND SECURITY SCANNING
  # =============================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: csharp
          queries: security-and-quality

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --no-restore --configuration Release

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run security audit
        run: |
          dotnet list package --vulnerable --include-transitive
          dotnet audit --fail-on-warnings

  # =============================================
  # UNIT TESTS AND CODE COVERAGE
  # =============================================
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-project:
          - tests/Atlas.Ledger.Tests.Unit
          - gateways/Atlas.ApiGateway.Tests
          - tests/Atlas.Risk.Features.Tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --no-restore --configuration Release

      - name: Run tests
        run: |
          dotnet test ${{ matrix.test-project }} \
            --no-build \
            --configuration Release \
            --collect:"XPlat Code Coverage" \
            --results-directory ./coverage \
            --logger trx \
            --logger "console;verbosity=normal"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-project }}
          path: ${{ matrix.test-project }}/TestResults/

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-${{ matrix.test-project }}
          path: ./coverage

  # =============================================
  # INTEGRATION TESTS
  # =============================================
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: atlas_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --no-restore --configuration Release

      - name: Run database migrations
        run: |
          dotnet run --project src/Ledger/Atlas.Ledger.Api --no-build --configuration Release -- --migrate
        env:
          ConnectionStrings__Ledger: "Host=localhost;Port=5432;Database=atlas_test;Username=postgres;Password=postgres"
          ConnectionStrings__Redis: "localhost:6379"

      - name: Run integration tests
        run: |
          # Start services in background
          docker-compose -f infrastructure/docker/docker-compose.yml up -d postgres redis redpanda
          
          # Wait for services to be ready
          sleep 30
          
          # Run integration tests
          dotnet test tests/Atlas.Integration.Tests --no-build --configuration Release
        env:
          ConnectionStrings__Ledger: "Host=localhost;Port=5432;Database=atlas_test;Username=postgres;Password=postgres"
          ConnectionStrings__Redis: "localhost:6379"
          KAFKA_BOOTSTRAP_SERVERS: "localhost:9092"

      - name: Cleanup
        if: always()
        run: docker-compose -f infrastructure/docker/docker-compose.yml down

  # =============================================
  # MULTI-STAGE DOCKER BUILDS
  # =============================================
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [security-scan, test]
    strategy:
      matrix:
        service:
          - ledger
          - payments
          - loans
          - amlworker
          - gateway
          - backoffice

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.service == 'ledger' && 'src/Services/Atlas.Ledger/Dockerfile' || 
                 matrix.service == 'payments' && 'src/Services/Atlas.Payments/Dockerfile' ||
                 matrix.service == 'loans' && 'src/Loans/Atlas.Loans.Api/Dockerfile' ||
                 matrix.service == 'amlworker' && 'src/KycAml/Atlas.KycAml.Worker/Dockerfile' ||
                 matrix.service == 'gateway' && 'gateways/Atlas.ApiGateway/Dockerfile' ||
                 matrix.service == 'backoffice' && 'src/Backoffice/Atlas.Backoffice.Api/Dockerfile' }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ matrix.service }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # =============================================
  # PERFORMANCE TESTING
  # =============================================
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup k6
        run: |
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Start test environment
        run: |
          docker-compose -f infrastructure/docker/docker-compose.yml up -d
          sleep 60  # Wait for services to be ready

      - name: Run performance tests
        run: |
          k6 run infrastructure/devops/k6/transfer-5k-rps.js
          k6 run infrastructure/devops/k6/balance-read-10k-rps.js

      - name: Cleanup
        if: always()
        run: docker-compose -f infrastructure/docker/docker-compose.yml down

  # =============================================
  # DEPLOYMENT
  # =============================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images, integration-test]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS credentials
        run: |
          az aks get-credentials --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }}

      - name: Deploy to staging
        run: |
          # Update image tags in Kubernetes manifests
          sed -i "s|image: .*|image: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/ledger:${{ github.sha }}|g" infrastructure/k8s/ledger/deployment.yaml
          sed -i "s|image: .*|image: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/payments:${{ github.sha }}|g" infrastructure/k8s/payments/deployment.yaml
          
          # Apply Kubernetes manifests
          kubectl apply -f infrastructure/k8s/ --namespace=atlasbank-staging

      - name: Wait for deployment
        run: |
          kubectl rollout status deployment/ledger-api --namespace=atlasbank-staging
          kubectl rollout status deployment/payments-api --namespace=atlasbank-staging

      - name: Run smoke tests
        run: |
          # Wait for services to be ready
          sleep 30
          
          # Run smoke tests against staging
          curl -f http://staging.atlasbank.com/health || exit 1

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images, integration-test, performance-test]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS credentials
        run: |
          az aks get-credentials --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }}

      - name: Deploy to production
        run: |
          # Update image tags in Kubernetes manifests
          sed -i "s|image: .*|image: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/ledger:${{ github.sha }}|g" infrastructure/k8s/ledger/deployment.yaml
          sed -i "s|image: .*|image: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/payments:${{ github.sha }}|g" infrastructure/k8s/payments/deployment.yaml
          
          # Apply Kubernetes manifests
          kubectl apply -f infrastructure/k8s/ --namespace=atlasbank-production

      - name: Wait for deployment
        run: |
          kubectl rollout status deployment/ledger-api --namespace=atlasbank-production
          kubectl rollout status deployment/payments-api --namespace=atlasbank-production

      - name: Run production smoke tests
        run: |
          # Wait for services to be ready
          sleep 60
          
          # Run smoke tests against production
          curl -f https://api.atlasbank.com/health || exit 1

  # =============================================
  # NOTIFICATIONS
  # =============================================
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: Notify on success
        if: ${{ needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success' }}
        run: |
          echo "✅ Deployment successful!"
          # Add Slack/Teams notification here

      - name: Notify on failure
        if: ${{ needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure' }}
        run: |
          echo "❌ Deployment failed!"
          # Add Slack/Teams notification here