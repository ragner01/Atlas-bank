# Optimized Dockerfile for AtlasBank API Gateway
# Implements Docker build optimization with layer caching

# Build stage
FROM mcr.microsoft.com/dotnet/sdk:9.0-alpine AS build
WORKDIR /src

# Install build dependencies
RUN apk update && apk upgrade && apk add --no-cache ca-certificates

# Copy project files first for better layer caching
COPY ["gateways/Atlas.ApiGateway/Atlas.ApiGateway.csproj", "gateways/Atlas.ApiGateway/"]

# Restore dependencies (this layer will be cached if project files don't change)
RUN dotnet restore "gateways/Atlas.ApiGateway/Atlas.ApiGateway.csproj" --runtime linux-musl-x64

# Copy source code (this layer will be rebuilt when source changes)
COPY ["gateways/Atlas.ApiGateway/", "gateways/Atlas.ApiGateway/"]

# Build the application
RUN dotnet build "gateways/Atlas.ApiGateway/Atlas.ApiGateway.csproj" -c Release -o /app/build

# Publish stage
FROM build AS publish
RUN dotnet publish "gateways/Atlas.ApiGateway/Atlas.ApiGateway.csproj" -c Release -o /app/publish \
    --self-contained false \
    /p:PublishSingleFile=false \
    /p:PublishTrimmed=false \
    /p:EnableCompressionInSingleFile=false

# Runtime stage - MINIMAL SECURITY HARDENED
FROM mcr.microsoft.com/dotnet/aspnet:9.0-alpine AS runtime
WORKDIR /app

# Install runtime dependencies
RUN apk update && apk upgrade && \
    apk add --no-cache ca-certificates tzdata wget && \
    rm -rf /var/cache/apk/*

# Create a non-root user
RUN addgroup -g 1010 -S gatewayuser && \
    adduser -u 1010 -S gatewayuser -G gatewayuser

# Copy published application
COPY --from=publish /app/publish .

# Set file permissions (as root before switching user)
RUN chown -R gatewayuser:gatewayuser /app && \
    chmod -R 755 /app

# Switch to non-root user
USER gatewayuser

# Health check using wget (no curl dependency)
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:${PORT:-5080}/health || exit 1

# Entry point
ENTRYPOINT ["dotnet", "Atlas.ApiGateway.dll"]