@page "/cases"
@using System.Net.Http.Json

<h1>AML Cases</h1>
<input @bind="filter" placeholder="status (Open/UnderReview/Escalated/Closed) or tenant id" />
<button @onclick="Load">Refresh</button>

<table class="table">
  <thead><tr><th>Id</th><th>Title</th><th>Status</th><th>Owner</th><th>Opened</th><th></th></tr></thead>
  <tbody>
  @foreach(var c in cases)
  {
    <tr>
      <td>@c.Id</td><td>@c.Title</td><td>@c.Status</td><td>@c.Owner</td><td>@c.OpenedAt.ToLocalTime()</td>
      <td>
        <button @onclick="() => Update(c.Id, "UnderReview")">UnderReview</button>
        <button @onclick="() => Update(c.Id, "Escalated")">Escalate</button>
        <button @onclick="() => Update(c.Id, "Closed")">Close</button>
      </td>
    </tr>
  }
  </tbody>
</table>

@code {
  record CaseDto(Guid Id, string Title, string Status, string? Owner, DateTimeOffset OpenedAt);
  private List<CaseDto> cases = new();
  string filter = "";
  HttpClient Http => new(){ BaseAddress = new Uri(Environment.GetEnvironmentVariable("CASES_API") ?? "http://localhost:5201") };

  protected override async Task OnInitializedAsync() => await Load();
  async Task Load()
  {
    var q = string.IsNullOrWhiteSpace(filter) ? "" : $"?status={filter}&tenant=tnt_demo";
    var data = await Http.GetFromJsonAsync<List<CaseDto>>($"/aml/cases{q}");
    cases = data ?? new();
  }
  async Task Update(Guid id, string status)
  {
    await Http.PatchAsync($"/aml/cases/{id}?status={status}", null);
    await Load();
  }
}
